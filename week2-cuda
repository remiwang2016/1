float *d_arr=new float[N];
h_a.size()
h_a.data < --returning a pointer to the dynamic arrg h.a
addVectors<<<#ofBolcks,#ofThreads>>(...parameters)
da 1__1_______________   1000
db 1__1_______________
dc 1__1_______________
size <--size of array
numThreads <--
size/numThreads  10/3 in C++-->3 but still one cant work
To avoid that we need to (10+3-1)/3=4-->(size+numThreads-1)/numThreads

Class in GPU
C0 __1_________
C1 __1_________
C0.magnitude()+C1.magnitude()                                   

(a+bi)^2=a^2+2abi-b^2

__device__ void(squareVal)
{ float hr = r*r-i*i;
float hi = 2*r*i;
r= hr;
i=hi;

}

__global__void squareVals(int size,cuComplex *d_a)
{
int i =threadIdx.x + blockDim.x*blockIdx.x;
if(i>=size)
 {
return;
 }
d_a[i].squareVal();
}

suareVals<< <(B+numThreads-1)/numThreads,numThreads>> >(N,d_c1);

cudaMemcpy(v.data(),d_c1,N*sizeof(cuComplex),cudaMemcpyDeviceToHost); 

.cuh -- header file
.cu  -- source file

nvcc--cuda compiler
